Dronazon

- ogni 5 sec:
	- genera ordine (id, punto di partenza, punto di arrivo);
	- pubblicazione ordine sul broker MQTT al topic dronazon/smartcity/orders/;



Drone:
1) MainDrone
2) Console
3) NetworkChecker
4) PM10Simulator
5) MQTTSubscription
6) SendGlobalStats
7) Delivery
8) ParallelCommunication
9) Recharge
10) PrintInfo


1) MainDrone:
	- drone initialization (id, ip, port, ammServerAddress);
	- REST call to ServerAmministratore asking to be added to SmartCity:
		- request accepted:
			- receive the position and the other drones list;
			- network ring generation:
			    - only one in the network -> the drone becomes the master;
			    - otherwise -> send the drone position to all the other drones in the network;
			                -> receive the master id;
			- start threads:
			    - Console;
			    - NetworkChecker;
			    - PM10Simulator
			    - if the drone is the master also:
                    - MQTTSubscription;
                    - SendGlobalStats;
		- request refused:
			- stop;

2) Console
    - if the user command is "quit":
        - stop 'NetworkChecker' and 'Console' threads;
        - if the drone is the master:
                - disconnect from the MQTT broker;
        - wait until, eventually, the undergoing delivery is finished;
        - if the drone is the master:
            - assign the last orders (until the orders list is empty);
            - stop 'PM10Simulator' thread;
            - send for the last time the global stats to ServerAmministratore;
        - REST call to ServerAmministratore asking to be removed from SmartCity;

3) NetworkChecker
	- every 5 seconds:
		- if the next drone in the network ring is not alive:
		    - remove the master drone from the network ring
		    - it's the master:
		        - send the removed drone id to the new next drone (it has to remove it) and start an election (Chang and Roberts);
        - it's not the master:
            - send the removed drone id to all the other drones (each has to remove it);

    read:
        - d.getNetworkTopology().getDronesList (networkTopology, dronesList)
        - d.getNetworkTopology().getNextDrone (networkTopology, dronesList)
        - d.getNetworkTopology().getDroneWithId (networkTopology, dronesList)
        - d.getBattery (battery)
        - d.getPosition() (d.position)
    write:
        - d.setParticipant (participant)
        - d.setMaster (master)
        - d.setMasterId (masterId)
        - td.setPosition (td.position)

4) PM10Simulator
    read:
    write:
        - d.setPollutionLevel (pollutionLevel)

5) MQTTSubscription
    read:
        - d.getOrderList (ordersList)
        - d.getNetworkTopology().getDronesList() (dronesList)
    write:
        - d.addOrder (ordersList)
        - d.getOrdersList().remove (orderList)

6) SendGlobalStats
    read:
        - d.getAvgOrder (avgOrder)
        - d.getAvgKm (avgKm)
        - d.getAvgPollution (avgPollution)
        - d.getAvgBattery (avgBattery)
    write:
        - d.getAvgOrder().clear (avgOrder)
        - d.getAvgKm().clear (avgKm)
        - d.getAvgPollution().clear (avgPollution)
        - d.getAvgBattery().clear (avgBattery)
7) Delivery
    read:
        - d.getBattery() (battery)
        - d.getnOrders() (nOrders)
        - d.getMasterId() (masterId)
        - d.getPosition() (d.position)
        - d.getCoveredDistance() (coveredDistance)
        - d.getMaster() (master)
        - d.getNetworkTopology().getDroneWithId (networkTopology, dronesList)
    write:
        - d.setDelivering (delivering)
        - d.setPosition (d.position)
        - d.setCoveredDistance (delivering)
        - d.setBattery (battery)
        - d.setnOrders (nOrders)
        - d.getAvgOrder().add (avgOrder)
        - d.getAvgKm().add (avgKm)
        - d.getAvgPollution().add (avgPollution)
        - d.getAvgBattery().add (avgBattery)

8) ParallelCommunication
    read:
        - d.getPosition() (d.position)
    write:
        - d.getNetworkTopology().addNewDrone() (networkTopology, dronesList)
        - d.setMasterId (masterId)
        - MainDrone.candidates.add
        - td.setPosition (td.position)


- Sensori inquinamento:
	- avvio il rilevamento:
		- inserisco il valore nel buffer (add);
		- controllo che il buffer sia pieno (8):
			- pieno:
				- Metodo readAllAndClean:
					- calcolo la media degli 8 valori;
					- svuoto i primi 4 valori dal buffer;
			- NON pieno:
				- ok, continuo;

4) BatteryChecker
	- if batteryLevel < 15%:
			same function as quit command in 'Console' thread