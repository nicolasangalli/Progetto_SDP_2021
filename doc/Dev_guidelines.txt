Dronazon

- ogni 5 sec:
	- genera ordine (id, punto di partenza, punto di arrivo);
	- pubblicazione ordine sul broker MQTT al topic dronazon/smartcity/orders/;



Drone:
1) MainDrone
2) Console
3) NetworkChecker
4) PM10Simulator
5) MQTTSubscription
6) SendGlobalStats
7) Delivery


1) MainDrone:
	- drone initialization (id, ip, port, ammServerAddress);
	- REST call to ServerAmministratore asking to be added to SmartCity:
		- request accepted:
			- receive the position and the other drones list;
			- network ring generation:
			    - only one in the network -> the drone becomes the master;
			    - otherwise -> send the drone position to all the other drones in the network;
			                -> receive the master id;
			- start threads:
			    - Console;
			    - NetworkChecker;
			    - PM10Simulator
			    - if the drone is the master also:
                    - MQTTSubscription;
                    - SendGlobalStats;
		- request refused:
			- stop;

2) Console
    - if the user command is "quit":
        - stop 'NetworkChecker' and 'Console' threads;
        - if the drone is the master:
                - disconnect from the MQTT broker;
        - wait until, eventually, the undergoing delivery is finished;
        - if the drone is the master:
            - assign the last orders (until the orders list is empty);
            - stop 'PM10Simulator' thread;
            - send for the last time the global stats to ServerAmministratore;
        - REST call to ServerAmministratore asking to be removed from SmartCity;

3) NetworkChecker
	- every 5 seconds:
		- if the next drone in the network ring is not alive:
		    - remove the master drone from the network ring
		    - it's the master:
		        - send the removed drone id to the new next drone (it has to remove it) and start an election (Chang and Roberts);
        - it's not the master:
            - send the removed drone id to all the other drones (each has to remove it);


- Controllo batteria:
	- controllo il livello di batteria:
		- >= 15%:
			- ok, non faccio nulla;
		- < 15%:
			Metodo stop:
				- termino l'eventuale consegna in corso e ...;
				- controllo se il drone è il master o no:
					- master:
						- disconnessione dal broker MQTT;
						- assegnare le consegne rimanenti;
				- chiusura connessione con altri droni (forzata, non comunicare la propria uscita);
				- controllo se il drone è il master o no:
					- master:
						- invio al ServerAmministratore le statistiche globali;
				- REST call al ServerAmministratore per uscire dalla SmartCity:
					- in ogni caso, stop;

- Sensori inquinamento:
	- avvio il rilevamento:
		- inserisco il valore nel buffer (add);
		- controllo che il buffer sia pieno (8):
			- pieno:
				- Metodo readAllAndClean:
					- calcolo la media degli 8 valori;
					- svuoto i primi 4 valori dal buffer;
			- NON pieno:
				- ok, continuo;